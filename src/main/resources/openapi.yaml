openapi: 3.0.3
info:
  title: Banking API
  description: |-
    API bancaria para la gestión de clientes, cuentas y movimientos.
    Implementada con arquitectura hexagonal usando Spring WebFlux y R2DBC.
  version: 1.0.0
  contact:
    email: acxelandres@outlook.com

tags:
  - name: customers
    description: Operaciones con clientes
  - name: accounts
    description: Operaciones con cuentas bancarias
  - name: movements
    description: Operaciones con movimientos bancarios

paths:
  /api/v1/customers:
    get:
      tags: [customers]
      summary: Obtener todos los clientes
      description: Retorna una lista de todos los clientes registrados
      operationId: getAllCustomers
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDto'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [customers]
      summary: Crear un nuevo cliente
      description: Crea un nuevo cliente en el sistema
      operationId: createCustomer
      requestBody:
        description: Cliente a crear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/customers/{id}:
    get:
      tags: [customers]
      summary: Obtener cliente por ID
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '404':
          description: Cliente no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [customers]
      summary: Actualizar cliente
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        description: Datos actualizados del cliente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
      responses:
        '200':
          description: Cliente actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
        '404':
          description: Cliente no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [customers]
      summary: Eliminar cliente
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Cliente eliminado
        '404':
          description: Cliente no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/accounts:
    get:
      tags: [accounts]
      summary: Obtener todas las cuentas
      operationId: getAllAccounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDto'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [accounts]
      summary: Crear una nueva cuenta
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDto'
      responses:
        '201':
          description: Cuenta creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/accounts/{id}:
    get:
      tags: [accounts]
      summary: Obtener cuenta por ID
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '404':
          description: Cuenta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [accounts]
      summary: Actualizar cuenta
      operationId: updateAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDto'
      responses:
        '200':
          description: Cuenta actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'
        '404':
          description: Cuenta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [accounts]
      summary: Eliminar cuenta
      operationId: deleteAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Cuenta eliminada
        '404':
          description: Cuenta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/movements:
    get:
      tags: [movements]
      summary: Obtener todos los movimientos
      operationId: getAllMovements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovementDto'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [movements]
      summary: Crear un nuevo movimiento
      operationId: createMovement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovementDto'
      responses:
        '201':
          description: Movimiento creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovementDto'
        '400':
          description: Datos inválidos o saldo insuficiente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/movements/{id}:
    get:
      tags: [movements]
      summary: Obtener movimiento por ID
      operationId: getMovementById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovementDto'
        '404':
          description: Movimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [movements]
      summary: Eliminar movimiento
      operationId: deleteMovement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Movimiento eliminado
        '404':
          description: Movimiento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CustomerDto:
      type: object
      required: [name, gender, identification, address, phoneNumber, password]
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        gender:
          type: string
          enum: [MALE, FEMALE]
        identification:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
          format: password
        status:
          type: boolean
          default: true

    AccountDto:
      type: object
      required: [number, type, initialBalance, customerId]
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        number:
          type: string
        type:
          type: string
          enum: [SAVINGS, CHECKING]
        initialBalance:
          type: number
          format: decimal
        currentBalance:
          type: number
          format: decimal
          readOnly: true
        status:
          type: boolean
          default: true
        customerId:
          type: integer
          format: int64

    MovementDto:
      type: object
      required: [type, amount, accountId]
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        date:
          type: string
          format: date-time
          readOnly: true
        type:
          type: string
          enum: [CREDIT, DEBIT]
        amount:
          type: number
          format: decimal
        balance:
          type: number
          format: decimal
          readOnly: true
        accountId:
          type: integer
          format: int64

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    ValidationErrors:
      type: object
      additionalProperties:
        type: string
